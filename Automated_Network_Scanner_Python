# 1. Prompt user for hostname, print ip address associated with user input
import socket

hostname = input("Please enter a host to scan: ")
print(hostname)

ip_address = socket.gethostbyname(hostname)

print(ip_address)


# 2. Record start date and time

from datetime import datetime

start_time = datetime.now()

print(start_time)
ofile = open("portscanresults.txt", 'a+')
ofile.write("Started at " + str(start_time) + "\n")
ofile.close()

# 3. Check host is available; if not, record in text file

import platform
import subprocess

def ping(host):

    param = '-n' if platform.system().lower() == 'windows' else '-c'
    #command = ['ping', param, '1', host]
    z = subprocess.Popen(['ping', param, '1', host], stdout=subprocess.PIPE).communicate()
    print(z)
    if str(z).find('Request timed out') > 0:
        print("Host is not available")
        ofile = open("portscanresults.txt", 'a+')
        ofile.write("Host is not available \n")
        ofile.close()
    else:
        print("Continuing to port scan")


ping(ip_address)


# 4. Scan ports

import socket

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

host = ip_address

def portScan (port):

    try:
        con = s.connect((host, port))
        return True
    except:
        return False

for x in range(1,1026):
# 5. Record all open ports in text file
    if portScan(x):
        print("Port", x, "is open")
        ofile = open("portscanresults.txt", 'a+')
        ofile.write("Port " + str(x) + " is open\n")
        ofile.close()
    else:
        print("Port", x, "is not open" )


# 6. Record end date and time

end_time = datetime.now()

print(end_time)
ofile = open("portscanresults.txt", 'a+')
ofile.write("Ended at " + str(end_time) + "\n")
ofile.close()


# 7. Record total time taken to scan all ports

total_time = end_time - start_time
print(total_time)
ofile = open("portscanresults.txt", 'a+')
ofile.write("Total time was " + str(total_time) + "\n")
ofile.close()
